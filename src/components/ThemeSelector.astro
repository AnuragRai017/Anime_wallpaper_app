---
import { themeConfigs, currentTheme, setTheme, type ThemeName } from '../store/themeStore';
---

<div class="theme-selector relative">
  <button
    id="theme-toggle"
    class="p-2 rounded-lg bg-gray-100 dark:bg-gray-800 text-gray-500 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:focus:ring-gray-700 transition-colors duration-300"
    aria-label="Toggle theme menu"
    aria-expanded="false"
  >
    <!-- Theme icons -->
    <div class="flex items-center space-x-2">
      <span class="theme-icon">
        <!-- Light Icon -->
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 theme-icon-light" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
        </svg>
        <!-- Dark Icon -->
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 theme-icon-dark" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
        </svg>
        <!-- Red Lunar Icon -->
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 theme-icon-red-lunar" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
        </svg>
        <!-- Yellow Flash Icon -->
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 theme-icon-yellow-flash" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v2m0 18v-2m9-9h-2M5 12H3m14.121 7.121l-1.414-1.414M8.293 8.293L6.879 6.879M15.707 6.879l1.414-1.414M8.293 15.707l-1.414 1.414" />
        </svg>
        <!-- Chainsaw Icon -->
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 theme-icon-chainsaw" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.121 14.121L19 19m-7-7l7-7m-7 7l-2.879 2.879M12 12L9.121 9.121m0 5.758a3 3 0 10-4.243 4.243 3 3 0 004.243-4.243zm0 0L9.121 9.121" />
        </svg>
        <!-- Gojo Icon -->
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 theme-icon-gojo" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
        </svg>
      </span>
      <span class="hidden md:inline text-sm font-medium current-theme-name">Theme</span>
    </div>
  </button>

  <!-- Dropdown Theme Menu -->
  <div id="theme-dropdown" class="absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black ring-opacity-5 focus:outline-none z-50 theme-dropdown hidden transform scale-95 opacity-0 transition-all duration-100 origin-top-right">
    <div class="py-1" role="menu" aria-orientation="vertical" aria-labelledby="theme-toggle">
      {Object.values(themeConfigs).map((theme) => (
        <button
          class="theme-option w-full text-left px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-150 flex items-center space-x-2"
          data-theme={theme.name}
          role="menuitem"
        >
          <span class={`h-3 w-3 rounded-full inline-block theme-color-${theme.name}`}></span>
          <span>{theme.label}</span>
        </button>
      ))}
    </div>
  </div>
</div>

<script>
  // Track the dropdown state
  let isDropdownOpen: boolean = false;
  
  // DOM Elements
  const themeToggle = document.getElementById('theme-toggle') as HTMLButtonElement | null;
  const themeDropdown = document.getElementById('theme-dropdown') as HTMLDivElement | null;
  const themeOptions = document.querySelectorAll('.theme-option') as NodeListOf<HTMLButtonElement>;
  const currentThemeNameEl = document.querySelector('.current-theme-name') as HTMLSpanElement | null;
  
  // Declare updateTheme on window for TypeScript
  declare global {
    interface Window {
      updateTheme: (theme: string) => void;
    }
  }
  
  // Update visible theme icon based on current theme
  function updateThemeIcon(themeName: string): void {
    document.querySelectorAll('.theme-icon > svg').forEach(icon => {
      icon.classList.add('hidden');
    });
    const activeIcon = document.querySelector(`.theme-icon-${themeName}`) as SVGElement | null;
    if (activeIcon) {
      activeIcon.classList.remove('hidden');
    }
    
    // Update theme name text
    if (currentThemeNameEl) {
      currentThemeNameEl.textContent = themeName.split('-').map((word: string) => 
        word.charAt(0).toUpperCase() + word.slice(1)
      ).join(' ');
    }
  }

  // Toggle dropdown visibility
  function toggleDropdown(): void {
    isDropdownOpen = !isDropdownOpen;
    
    if (isDropdownOpen) {
      themeDropdown?.classList.remove('hidden', 'scale-95', 'opacity-0');
      themeDropdown?.classList.add('scale-100', 'opacity-100');
      themeToggle?.setAttribute('aria-expanded', 'true');
    } else {
      themeDropdown?.classList.add('scale-95', 'opacity-0');
      setTimeout(() => {
        themeDropdown?.classList.add('hidden');
      }, 100);
      themeToggle?.setAttribute('aria-expanded', 'false');
    }
  }

  // Close dropdown if clicked outside
  function handleClickOutside(event: MouseEvent): void {
    if (isDropdownOpen && themeToggle && !themeToggle.contains(event.target as Node) && 
        themeDropdown && !themeDropdown.contains(event.target as Node)) {
      toggleDropdown();
    }
  }

  // Set up event listeners
  themeToggle?.addEventListener('click', (e) => {
    e.preventDefault();
    toggleDropdown();
  });

  themeOptions.forEach(option => {
    option.addEventListener('click', () => {
      const themeName: string = option.getAttribute('data-theme') || 'light';
      // Use the global updateTheme function defined in Layout.astro
      if (typeof window.updateTheme === 'function') {
        window.updateTheme(themeName);
      }
      updateThemeIcon(themeName);
      toggleDropdown();
    });
  });

  document.addEventListener('click', handleClickOutside);
  
  // Initialize the theme icon on load
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize from local storage or system preference
    const savedTheme: string = localStorage.getItem('theme') || 'theme-light';
    const themeName: string = savedTheme.replace('theme-', '');
    updateThemeIcon(themeName);
  });
</script>

<style>
  .theme-dropdown {
    transition: transform 0.1s ease-out, opacity 0.1s ease-out;
  }

  /* Theme color indicators */
  .theme-color-light {
    background: linear-gradient(to right, #f3f4f6, #ffffff);
    border: 1px solid #e5e7eb;
  }
  
  .theme-color-dark {
    background: linear-gradient(to right, #111827, #1f2937);
    border: 1px solid #374151;
  }
  
  .theme-color-red-lunar {
    background: linear-gradient(to right, #7f1d1d, #991b1b);
    border: 1px solid #b91c1c;
  }
  
  .theme-color-yellow-flash {
    background: linear-gradient(to right, #fbbf24, #f59e0b);
    border: 1px solid #d97706;
  }
  
  .theme-color-chainsaw {
    background: linear-gradient(to right, #4b5563, #991b1b);
    border: 1px solid #7f1d1d;
  }
  
  .theme-color-gojo {
    background: linear-gradient(to right, #312e81, #4f46e5);
    border: 1px solid #4338ca;
  }
</style>