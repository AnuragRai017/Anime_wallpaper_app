---
import Layout from '../layouts/Layout.astro';
import Welcome from '../components/Welcome.astro';
import WallpaperCard from '../components/WallpaperCard.astro';
import LoadingSpinner from '../components/LoadingSpinner.astro';
import ThemeSelector from '../components/ThemeSelector.astro';
import { wallhavenAPI } from '../services/wallhavenAPI';

// Add proper error handling for server-side fetch
let wallpapers: any[] = [];
let error = null;

try {
  // Fetch the latest anime wallpapers for the homepage
  const response = await wallhavenAPI.searchWallpapers({
    categories: '010', // Anime category
    purity: '100',     // SFW content
    sorting: 'date_added',
    page: 1
  });
  wallpapers = response.data;
} catch (e) {
  console.error('Failed to load wallpapers:', e);
  error = (e instanceof Error && e.message) ? e.message : 'Failed to load wallpapers';
}
---

<Layout title="KIBEWALL | Home">
  <ThemeSelector slot="theme-selector" />
  
  <Welcome />
  
  <section class="mt-12 relative">
    <!-- Section heading with enhanced design -->
    <div class="flex items-center mb-8 relative">
      <div class="absolute left-0 w-2 h-8 bg-gradient-to-b from-rose-500 to-purple-600 rounded-full"></div>
      <h2 class="text-2xl font-bold ml-4 text-primary">Latest Anime Wallpapers</h2>
      <div class="ml-4 px-2.5 py-1 text-xs font-medium bg-rose-500/10 text-rose-600 dark:text-rose-400 rounded-full">
        New
      </div>
      <div class="flex-1 h-px bg-gradient-to-r from-rose-500/50 via-transparent to-transparent ml-4"></div>
    </div>
    
    <div id="wallpaper-grid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
      {error ? (
        <div class="col-span-full p-8 text-center bg-red-50/50 dark:bg-red-900/20 backdrop-blur-sm rounded-xl border border-red-200 dark:border-red-800">
          <div class="text-red-600 dark:text-red-400 mb-3">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
            <p>Failed to load wallpapers</p>
          </div>
          <button id="retry-button" class="px-4 py-2 bg-rose-500 hover:bg-rose-600 text-white rounded-lg transition-colors">
            Retry
          </button>
        </div>
      ) : wallpapers.length > 0 ? (
        wallpapers.map(wallpaper => (
          <WallpaperCard wallpaper={wallpaper} />
        ))
      ) : (
        <div class="col-span-full text-center py-12 bg-white/40 dark:bg-gray-800/40 backdrop-blur-sm rounded-xl border border-gray-200/30 dark:border-gray-700/30">
          <LoadingSpinner size="lg" />
          <p class="text-primary mt-4">Loading wallpapers...</p>
        </div>
      )}
    </div>
    
    <!-- Enhanced loading indicator for infinite scroll -->
    <div id="scroll-trigger" class="py-8 text-center" style={error ? "display: none;" : ""}>
      <LoadingSpinner size="lg" />
      <p class="text-sm text-primary mt-2">Loading more wallpapers...</p>
    </div>
  </section>
</Layout>

<script>
  import { searchResults, loadMore, isLoading, pagination, searchWallpapers } from '../store/wallpaperStore';

  // Add retry button handler
  const retryButton = document.getElementById('retry-button');
  if (retryButton) {
    retryButton.addEventListener('click', () => {
      window.location.reload();
    });
  }
  
  // Initialize store with default homepage search with error handling
  try {
    searchWallpapers({
      categories: '010',
      purity: '100',
      sorting: 'date_added',
      page: 1
    }, true).catch(err => {
      console.error('Client-side search error:', err);
      
      // Show error UI if needed
      if (!document.querySelector('[data-error]')) {
        const grid = document.getElementById('wallpaper-grid');
        if (grid) {
          grid.innerHTML = `
            <div class="col-span-full p-8 text-center bg-red-50/50 dark:bg-red-900/20 backdrop-blur-sm rounded-xl border border-red-200 dark:border-red-800">
              <div class="text-red-600 dark:text-red-400 mb-3">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>
                <p>Failed to load wallpapers</p>
              </div>
              <button onclick="window.location.reload()" class="px-4 py-2 bg-rose-500 hover:bg-rose-600 text-white rounded-lg transition-colors">
                Retry
              </button>
            </div>
          `;
        }
        
        // Hide scroll trigger
        const scrollTrigger = document.getElementById('scroll-trigger');
        if (scrollTrigger) {
          scrollTrigger.style.display = 'none';
        }
      }
    });
  } catch (err) {
    console.error('Search initialization error:', err);
  }

  // Define wallpaper interface
  interface Wallpaper {
    id: string;
    thumbs: {
      large: string;
    };
    category: string;
    resolution: string;
    views: number;
    favorites: number;
  }

  // Create template for new wallpaper cards
  function createWallpaperCard(wallpaper: Wallpaper) {
    const cardElement = document.createElement('div');
    cardElement.className = 'wallpaper-card group relative overflow-hidden rounded-xl shadow-lg transition-all duration-500 transform-gpu';
    
    cardElement.innerHTML = `
      <a href="/wallpaper/${wallpaper.id}" class="block aspect-auto">
        <!-- Main image with enhanced loading and hover effects -->
        <img 
          src="${wallpaper.thumbs.large}" 
          alt="Wallpaper ID: ${wallpaper.id}"
          loading="lazy"
          class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
        />
        
        <!-- Glass overlay with improved aesthetics -->
        <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/30 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-500 backdrop-blur-sm group-hover:backdrop-blur-0">
          <!-- Content container with smoother animation -->
          <div class="absolute bottom-0 left-0 right-0 p-4 transform translate-y-4 group-hover:translate-y-0 transition-transform duration-500 ease-out">
            <div class="flex items-center justify-between">
              <!-- Category and resolution badges with improved design -->
              <div class="space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-500 delay-100">
                <span class="px-2 py-1 text-xs rounded-md bg-rose-500 text-white hover:bg-rose-600 transition-colors theme-badge inline-flex items-center gap-1 font-medium">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01" />
                  </svg>
                  ${wallpaper.category}
                </span>
                <span class="px-2 py-1 text-xs rounded-md bg-blue-500 text-white hover:bg-blue-600 transition-colors theme-badge inline-flex items-center gap-1 font-medium">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5v-4m0 4h-4m4 0l-5-5" />
                  </svg>
                  ${wallpaper.resolution}
                </span>
              </div>
              
              <!-- Views and favorites with improved design -->
              <div class="flex items-center space-x-3 opacity-0 group-hover:opacity-100 transition-opacity duration-500 delay-200">
                <span class="flex items-center text-xs text-gray-300">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                  </svg>
                  ${new Intl.NumberFormat().format(wallpaper.views)}
                </span>
                <span class="flex items-center text-xs text-gray-300">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5 mr-1 text-rose-400" fill="currentColor" viewBox="0 0 24 24" stroke="none">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                  </svg>
                  ${new Intl.NumberFormat().format(wallpaper.favorites)}
                </span>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Enhanced shine effect on hover -->
        <div class="card-shine absolute inset-0 opacity-0 group-hover:opacity-30 transition-opacity duration-1000 bg-gradient-to-tr from-transparent via-white to-transparent -translate-x-full group-hover:translate-x-full transform-gpu ease-in-out"></div>
        
        <!-- ID badge for quick reference -->
        <div class="absolute top-2 right-2 bg-black/50 backdrop-blur-md px-2 py-1 rounded-md text-xs font-mono text-white opacity-0 group-hover:opacity-100 transition-opacity duration-500 flex items-center">
          <span class="text-xs mr-1 text-rose-400">#</span>${wallpaper.id}
        </div>
      </a>
      
      <!-- Loading overlay that fades out -->
      <div class="loading-overlay absolute inset-0 bg-gray-100 dark:bg-gray-800 flex items-center justify-center transition-opacity duration-500">
        <div class="w-8 h-8 rounded-full border-2 border-rose-500 border-t-transparent animate-spin"></div>
      </div>
    `;
    
    return cardElement;
  }

  // Apply theme-specific animation classes to the cards
  function applyThemeAnimations(card: HTMLElement) {
    const html = document.documentElement;
    const theme = Array.from(html.classList)
      .find(cls => cls.startsWith('theme-'))?.replace('theme-', '') || 'light';
    
    // Remove all animation classes first
    card.classList.remove(
      'animate-pulse-slow', 
      'animate-flash', 
      'animate-saw', 
      'animate-pulse-blue'
    );
    
    // Add theme-specific animation class
    switch (theme) {
      case 'red-lunar':
        card.classList.add('animate-pulse-slow');
        break;
      case 'yellow-flash':
        card.classList.add('animate-flash');
        break;
      case 'chainsaw':
        card.classList.add('animate-saw');
        break;
      case 'gojo':
        card.classList.add('animate-pulse-blue');
        break;
    }

    // Adjust badge colors based on theme
    const badges = card.querySelectorAll('.theme-badge');
    badges.forEach((badge: Element, index: number) => {
      badge.classList.remove(
        'bg-rose-500', 'hover:bg-rose-600',
        'bg-blue-500', 'hover:bg-blue-600',
        'bg-red-700', 'hover:bg-red-600',
        'bg-amber-700', 'hover:bg-amber-600',
        'bg-indigo-700', 'hover:bg-indigo-600'
      );
      
      // First badge (category)
      if (index === 0) {
        switch (theme) {
          case 'light':
            badge.classList.add('bg-rose-500', 'hover:bg-rose-600');
            break;
          case 'dark':
            badge.classList.add('bg-rose-600', 'hover:bg-rose-700');
            break;
          case 'red-lunar':
            badge.classList.add('bg-red-700', 'hover:bg-red-600');
            break;
          case 'yellow-flash':
            badge.classList.add('bg-amber-700', 'hover:bg-amber-600');
            break;
          case 'chainsaw':
            badge.classList.add('bg-red-900', 'hover:bg-red-800');
            break;
          case 'gojo':
            badge.classList.add('bg-indigo-700', 'hover:bg-indigo-600');
            break;
        }
      } 
      // Second badge (resolution)
      else {
        switch (theme) {
          case 'light':
            badge.classList.add('bg-blue-500', 'hover:bg-blue-600');
            break;
          case 'dark':
            badge.classList.add('bg-blue-600', 'hover:bg-blue-700');
            break;
          case 'red-lunar':
            badge.classList.add('bg-red-800', 'hover:bg-red-700');
            break;
          case 'yellow-flash':
            badge.classList.add('bg-amber-800', 'hover:bg-amber-700');
            break;
          case 'chainsaw':
            badge.classList.add('bg-gray-800', 'hover:bg-gray-700');
            break;
          case 'gojo':
            badge.classList.add('bg-blue-800', 'hover:bg-blue-700');
            break;
        }
      }
    });
  }

  function handleImageLoading(card: HTMLElement) {
    const img = card.querySelector('img');
    const overlay = card.querySelector('.loading-overlay');
    
    if (!img || !overlay) return;
    
    if (img.complete) {
      // Image already loaded
      (overlay as HTMLElement).style.opacity = '0';
      setTimeout(() => {
        (overlay as HTMLElement).style.display = 'none';
      }, 300);
    } else {
      // Image still loading
      img.addEventListener('load', () => {
        (overlay as HTMLElement).style.opacity = '0';
        setTimeout(() => {
          (overlay as HTMLElement).style.display = 'none';
        }, 300);
      });
    }
  }

  // Set up infinite scroll with improved loading behavior
  function setupInfiniteScroll() {
    const scrollTrigger = document.getElementById('scroll-trigger');
    const wallpaperGrid = document.getElementById('wallpaper-grid');
    
    if (!scrollTrigger || !wallpaperGrid) return;

    const observer = new IntersectionObserver(async (entries) => {
      const trigger = entries[0];
      if (trigger.isIntersecting && !isLoading.get() && pagination.get().hasMore) {
        // Show loading state
        scrollTrigger.classList.add('loading');
        
        const response = await loadMore();
        if (response?.data) {
          response.data.forEach(wallpaper => {
            const cardElement = createWallpaperCard(wallpaper);
            wallpaperGrid.appendChild(cardElement);
            
            // Apply theme animations and handle image loading
            applyThemeAnimations(cardElement);
            handleImageLoading(cardElement);
          });
        }
        
        // Hide loading state
        scrollTrigger.classList.remove('loading');
      }
    }, {
      rootMargin: '200px'
    });

    observer.observe(scrollTrigger);

    // Clean up observer when page changes
    return () => observer.disconnect();
  }

  // Watch for theme changes to update card styling
  const themeObserver = new MutationObserver(() => {
    document.querySelectorAll('.wallpaper-card').forEach(card => {
      applyThemeAnimations(card as HTMLElement);
    });
  });

  // Initialize infinite scroll when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    setupInfiniteScroll();
    
    // Apply initial theme to cards and handle image loading
    document.querySelectorAll('.wallpaper-card').forEach(card => {
      applyThemeAnimations(card as HTMLElement);
      handleImageLoading(card as HTMLElement);
    });
    
    // Watch for theme changes
    themeObserver.observe(document.documentElement, { attributes: true });
  });
</script>

<style>
  /* Card styles */
  .wallpaper-card {
    transition: all 0.3s ease;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  .wallpaper-card:hover {
    transform: 
      scale(var(--theme-hover-scale, 1.05)) 
      rotate(var(--theme-hover-rotate, 0deg)) 
      skewX(var(--theme-hover-skew-x, 0deg)) 
      skewY(var(--theme-hover-skew-y, 0deg)) 
      translateX(var(--theme-hover-translate-x, 0px)) 
      translateY(var(--theme-hover-translate-y, -2px));
    box-shadow: 0 10px 25px var(--theme-card-shadow-color, rgba(236, 72, 153, 0.25));
  }

  .loading-overlay {
    z-index: 10;
  }

  /* Theme-specific shine effects */
  .theme-red-lunar .card-shine {
    background: linear-gradient(45deg, transparent, rgba(239, 68, 68, 0.3), transparent);
  }

  .theme-yellow-flash .card-shine {
    background: linear-gradient(45deg, transparent, rgba(245, 158, 11, 0.4), transparent);
  }

  .theme-chainsaw .card-shine {
    background: linear-gradient(45deg, transparent, rgba(255, 0, 0, 0.2), transparent);
  }

  .theme-gojo .card-shine {
    background: linear-gradient(45deg, transparent, rgba(79, 70, 229, 0.3), transparent);
  }
  
  /* Customize borders for light theme */
  .theme-light .wallpaper-card {
    border: 1px solid rgba(226, 232, 240, 0.8);
  }
  
  /* Add subtle glass morphism to cards */
  .wallpaper-card::before {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: inherit;
    padding: 1px;
    background: linear-gradient(to bottom right, rgba(255, 255, 255, 0.1), transparent);
    -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .wallpaper-card:hover::before {
    opacity: 1;
  }

  /* Animation classes */
  .animate-pulse-slow {
    animation: pulseSlow 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  @keyframes pulseSlow {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.8; }
  }

  .animate-flash {
    animation: flash 2s ease-out infinite;
  }

  @keyframes flash {
    0%, 70%, 100% {
      opacity: 1;
      transform: scale(1);
    }
    80% {
      opacity: 0.8;
      transform: scale(1.03);
    }
  }

  .animate-saw {
    animation: saw 3s ease-in-out infinite;
  }

  @keyframes saw {
    0%, 100% {
      transform: translateX(0);
    }
    10%, 30%, 50%, 70%, 90% {
      transform: translateX(-1px) rotate(-0.3deg);
    }
    20%, 40%, 60%, 80% {
      transform: translateX(1px) rotate(0.3deg);
    }
  }

  .animate-pulse-blue {
    animation: pulseBlue 4s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  @keyframes pulseBlue {
    0%, 100% {
      opacity: 1;
      box-shadow: 0 0 5px rgba(99, 102, 241, 0.2);
    }
    50% {
      opacity: 0.9;
      box-shadow: 0 0 15px rgba(99, 102, 241, 0.4);
    }
  }
</style>
