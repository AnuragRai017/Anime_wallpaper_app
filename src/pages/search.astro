---
import Layout from '../layouts/Layout.astro';
import WallpaperCard from '../components/WallpaperCard.astro';
import LoadingSpinner from '../components/LoadingSpinner.astro';
import { wallhavenAPI } from '../services/wallhavenAPI';

// Get search parameters from URL
const { searchParams } = Astro.url;
const query = searchParams.get('q') || '';
const categories = searchParams.get('categories') || '010'; // Default to anime
const purity = searchParams.get('purity') || '100'; // Default to SFW
const validSortings = ['date_added', 'relevance', 'random', 'views', 'favorites', 'toplist'] as const;
const sortingParam = (searchParams.get('sorting') || 'date_added') as typeof validSortings[number];
const sorting = validSortings.includes(sortingParam) ? sortingParam : 'date_added';
const resolution = searchParams.get('resolutions') || '';
const color = searchParams.get('colors') || '';

// Fetch initial wallpapers
const response = await wallhavenAPI.searchWallpapers({
  q: query,
  categories,
  purity,
  sorting,
  page: 1,
  resolutions: resolution,
  colors: color
});

const { data: wallpapers, meta } = response;

// List of available colors
const colorOptions = [
  { value: '660000', label: 'Dark Red' },
  { value: 'cc0000', label: 'Red' },
  { value: 'cc3333', label: 'Light Red' },
  { value: '0000cc', label: 'Blue' },
  { value: '000066', label: 'Dark Blue' },
  { value: '66cccc', label: 'Light Blue' },
  { value: '00cc00', label: 'Green' },
  { value: '006600', label: 'Dark Green' },
  { value: '66cc66', label: 'Light Green' },
  { value: 'cccc00', label: 'Yellow' },
  { value: 'cc9933', label: 'Orange' },
  { value: '999999', label: 'Gray' },
  { value: 'ffffff', label: 'White' },
  { value: '000000', label: 'Black' }
];
---

<Layout title="Search | KIBEWALL">
  <div class="mb-8">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-3xl font-bold">Search Wallpapers</h1>
      <button
        id="toggle-search"
        class="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-md transition-all duration-300 flex items-center gap-2"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 search-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
        <span class="search-text">Show Search</span>
      </button>
    </div>
    
    <form id="search-form" class="bg-gray-800 p-6 rounded-lg shadow-lg hidden transform transition-all duration-300 opacity-0 scale-95">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div>
          <label for="query" class="block text-sm font-medium text-gray-300 mb-1">Search</label>
          <input
            type="text"
            id="query"
            name="q"
            value={query}
            placeholder="Search by tag, keyword..."
            class="w-full rounded-md bg-gray-700 border-gray-600 text-gray-200 px-4 py-2"
          />
        </div>
        
        <div>
          <label for="categories" class="block text-sm font-medium text-gray-300 mb-1">Categories</label>
          <select
            id="categories"
            name="categories"
            class="w-full rounded-md bg-gray-700 border-gray-600 text-gray-200 px-4 py-2"
          >
            <option value="100" selected={categories === '100'}>General</option>
            <option value="010" selected={categories === '010'}>Anime</option>
            <option value="001" selected={categories === '001'}>People</option>
            <option value="111" selected={categories === '111'}>All</option>
          </select>
        </div>
        
        <div>
          <label for="sorting" class="block text-sm font-medium text-gray-300 mb-1">Sort By</label>
          <select
            id="sorting"
            name="sorting"
            class="w-full rounded-md bg-gray-700 border-gray-600 text-gray-200 px-4 py-2"
          >
            <option value="date_added" selected={sorting === 'date_added'}>Date Added</option>
            <option value="relevance" selected={sorting === 'relevance'}>Relevance</option>
            <option value="random" selected={sorting === 'random'}>Random</option>
            <option value="views" selected={sorting === 'views'}>Views</option>
            <option value="favorites" selected={sorting === 'favorites'}>Favorites</option>
            <option value="toplist" selected={sorting === 'toplist'}>Toplist</option>
          </select>
        </div>
        
        <div>
          <label for="resolutions" class="block text-sm font-medium text-gray-300 mb-1">Resolution</label>
          <select
            id="resolutions"
            name="resolutions"
            class="w-full rounded-md bg-gray-700 border-gray-600 text-gray-200 px-4 py-2"
          >
            <option value="" selected={resolution === ''}>Any</option>
            <option value="1920x1080" selected={resolution === '1920x1080'}>1920x1080</option>
            <option value="2560x1440" selected={resolution === '2560x1440'}>2560x1440</option>
            <option value="3840x2160" selected={resolution === '3840x2160'}>4K (3840x2160)</option>
          </select>
        </div>

        <div class="md:col-span-2 lg:col-span-4">
          <label class="block text-sm font-medium text-gray-300 mb-2">Color</label>
          <div class="grid grid-cols-7 gap-2">
            {colorOptions.map(colorOption => (
              <label
                class={`relative w-8 h-8 rounded cursor-pointer border-2 ${
                  color === colorOption.value ? 'border-purple-500' : 'border-transparent'
                } hover:border-purple-500/50 transition-colors`}
                style={`background-color: #${colorOption.value};`}
                title={colorOption.label}
              >
                <input
                  type="radio"
                  name="colors"
                  value={colorOption.value}
                  checked={color === colorOption.value}
                  class="sr-only"
                />
                {color === colorOption.value && (
                  <span class="absolute inset-0 flex items-center justify-center">
                    <svg class="w-4 h-4" viewBox="0 0 20 20" fill="currentColor">
                      <path d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" />
                    </svg>
                  </span>
                )}
              </label>
            ))}
          </div>
        </div>
      </div>
      
      <div class="mt-4 flex justify-end">
        <button
          type="submit"
          class="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-md transition-all duration-300 hover:scale-105 hover:shadow-lg hover:shadow-purple-500/30"
        >
          Search
        </button>
      </div>
    </form>
  </div>
  
  {query && (
    <div class="mb-4 p-3 bg-gray-800 rounded-lg">
      <p class="text-gray-300">
        Search results for: <span class="font-semibold text-white">{query}</span>
        {meta.total > 0 && (
          <span class="ml-2 text-gray-400">({meta.total} wallpapers found)</span>
        )}
      </p>
    </div>
  )}
  
  <div id="wallpaper-grid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
    {wallpapers.length > 0 ? (
      wallpapers.map(wallpaper => (
        <WallpaperCard wallpaper={wallpaper} />
      ))
    ) : (
      <div class="col-span-full text-center py-12 bg-gray-800 rounded-lg">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto text-gray-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <h3 class="text-xl font-semibold text-gray-300 mb-2">No wallpapers found</h3>
        <p class="text-gray-400">
          Try adjusting your search criteria or browse our featured collections.
        </p>
      </div>
    )}
  </div>

  <!-- Loading indicator for infinite scroll -->
  <div id="scroll-trigger" class="py-8 text-center">
    <LoadingSpinner size="lg" />
  </div>
</Layout>

<script>
  import { searchResults, loadMore, isLoading, pagination, searchWallpapers } from '../store/wallpaperStore';

  // Initialize form handling
  function initializeForm() {
    const form = document.getElementById('search-form') as HTMLFormElement;
    const toggleButton = document.getElementById('toggle-search') as HTMLButtonElement;
    const searchIcon = toggleButton.querySelector('.search-icon') as SVGElement;
    const searchText = toggleButton.querySelector('.search-text') as HTMLElement;
    const colorInputs = form.querySelectorAll('input[name="colors"]');
    
    // Toggle search form visibility
    toggleButton.addEventListener('click', () => {
      const isHidden = form.classList.contains('hidden');
      
      if (isHidden) {
        // Show form
        form.classList.remove('hidden');
        setTimeout(() => {
          form.classList.remove('opacity-0', 'scale-95');
          form.classList.add('opacity-100', 'scale-100');
        }, 50);
        searchText.textContent = 'Hide Search';
        searchIcon.innerHTML = `
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        `;
      } else {
        // Hide form
        form.classList.add('opacity-0', 'scale-95');
        setTimeout(() => {
          form.classList.add('hidden');
        }, 300);
        searchText.textContent = 'Show Search';
        searchIcon.innerHTML = `
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        `;
      }
    });

    // Handle color selection
    colorInputs.forEach(input => {
      input.addEventListener('change', () => {
        form.dispatchEvent(new Event('submit'));
      });
    });

    // Handle form submission
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(form);
      const searchParams = new URLSearchParams();
      
      // Add all form fields to search params
      for (const [key, value] of formData.entries()) {
        if (value) {
          searchParams.set(key, value.toString());
        }
      }

      // Update URL without reloading
      const newUrl = `${window.location.pathname}?${searchParams.toString()}`;
      window.history.pushState({ path: newUrl }, '', newUrl);

      // Perform search
      await searchWallpapers({
        q: formData.get('q')?.toString() || '',
        categories: formData.get('categories')?.toString(),
        sorting: formData.get('sorting')?.toString() as any,
        resolutions: formData.get('resolutions')?.toString(),
        colors: formData.get('colors')?.toString(),
        page: 1
      }, true);

      // Update grid with new results
      updateWallpaperGrid(searchResults.get());
    });

    // If there are search params in URL, show the form
    const urlParams = new URLSearchParams(window.location.search);
    if (Array.from(urlParams.entries()).length > 0) {
      toggleButton.click();
    }
  }

  // Create template for new wallpaper cards
  interface Wallpaper {
    id: string;
    thumbs: {
      large: string;
    };
    category: string;
    resolution: string;
    views: number;
    favorites: number;
  }

  function createWallpaperCard(wallpaper: Wallpaper) {
    return `
      <div class="group relative overflow-hidden rounded-lg shadow-lg transition-all duration-500 hover:scale-[1.03] hover:shadow-xl hover:shadow-purple-500/20 transform-gpu">
        <a href="/wallpaper/${wallpaper.id}" class="block aspect-auto">
          <img 
            src="${wallpaper.thumbs.large}" 
            alt="Wallpaper ID: ${wallpaper.id}"
            loading="lazy"
            class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
          />
          
          <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/30 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-500 backdrop-blur-sm group-hover:backdrop-blur-0">
            <div class="absolute bottom-0 left-0 right-0 p-4 transform translate-y-4 group-hover:translate-y-0 transition-transform duration-500 ease-out">
              <div class="flex items-center justify-between">
                <div class="space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-500 delay-100">
                  <span class="px-2 py-1 text-xs rounded-md bg-purple-700 text-white hover:bg-purple-600 transition-colors">
                    ${wallpaper.category}
                  </span>
                  <span class="px-2 py-1 text-xs rounded-md bg-blue-700 text-white hover:bg-blue-600 transition-colors">
                    ${wallpaper.resolution}
                  </span>
                </div>
                <div class="flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-500 delay-200">
                  <span class="flex items-center text-xs text-gray-300">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                    ${wallpaper.views}
                  </span>
                  <span class="flex items-center text-xs text-gray-300">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                    </svg>
                    ${wallpaper.favorites}
                  </span>
                </div>
              </div>
            </div>
          </div>
          
          <div class="absolute inset-0 opacity-0 group-hover:opacity-30 transition-opacity duration-1000 bg-gradient-to-tr from-transparent via-white to-transparent -translate-x-full group-hover:translate-x-full transform-gpu ease-in-out"></div>
        </a>
      </div>
    `;
  }

  // Update wallpaper grid with new results
  function updateWallpaperGrid(wallpapers: Wallpaper[]) {
    const grid = document.getElementById('wallpaper-grid');
    if (!grid) return;

    if (wallpapers.length === 0) {
      grid.innerHTML = `
        <div class="col-span-full text-center py-12 bg-gray-800 rounded-lg">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto text-gray-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <h3 class="text-xl font-semibold text-gray-300 mb-2">No wallpapers found</h3>
          <p class="text-gray-400">
            Try adjusting your search criteria or browse our featured collections.
          </p>
        </div>
      `;
      return;
    }

    grid.innerHTML = wallpapers.map(wallpaper => createWallpaperCard(wallpaper)).join('');
  }

  // Set up infinite scroll
  function setupInfiniteScroll() {
    const scrollTrigger = document.getElementById('scroll-trigger');
    const wallpaperGrid = document.getElementById('wallpaper-grid');
    
    if (!scrollTrigger || !wallpaperGrid) return;

    const observer = new IntersectionObserver(async (entries) => {
      const trigger = entries[0];
      if (trigger.isIntersecting && !isLoading.get() && pagination.get().hasMore) {
        const response = await loadMore();
        if (response?.data) {
          response.data.forEach(wallpaper => {
            const cardElement = document.createElement('div');
            cardElement.innerHTML = createWallpaperCard(wallpaper);
            wallpaperGrid.appendChild(cardElement.firstElementChild!);
          });
        }
      }
    }, {
      rootMargin: '100px'
    });

    observer.observe(scrollTrigger);

    // Clean up observer when page changes
    return () => observer.disconnect();
  }

  // Initialize when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    initializeForm();
    setupInfiniteScroll();
  });
</script>

<style>
  /* Add smooth transition for search form */
  #search-form {
    transition: all 0.3s ease-in-out;
  }
  
  #search-form.hidden {
    display: none;
  }
  
  #search-form:not(.hidden) {
    display: block;
  }
</style>